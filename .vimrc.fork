let g:DisableAutoPHPFolding = 1

" NERDTree {
    unmap <C-e>
    unmap <leader>nt
    map <leader>n :NERDTreeToggle<CR>:NERDTreeMirror<CR>
" }

set background=dark
set clipboard&
set nofoldenable
nmap <leader>b :BuffergatorOpen<CR>
nmap <silent> <leader>tt :set ts=2 sw=2 et<CR>
nmap <silent> <leader>tf :set ts=4 sw=4 et<CR>
" Powerline
let g:Powerline_symbols = 'fancy'

" NERDCommenter
let g:NERDSpaceDelims=1

" SnipMate
" Setting the author var
let g:snips_author='Atunori Kamori <atunori.kamori@gmail.com>'

" Tabularize
if exists(":Tabularize")
    nmap <Leader>aa :Tabularize /=><CR>
    vmap <Leader>aa :Tabularize /=><CR>
endif

set guioptions-=l           " remove the sidebar
set guioptions-=L           " remove the sidebar
set guioptions-=r           " remove the sidebar
set guioptions-=R           " remove the sidebar

" set guifont=Andale\ Mono\ for\ Powerline\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h16,Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18

nmap <Leader>tb :TagbarOpenAutoClose<CR>

unmap <Esc>[F
unmap <Esc>[H

" NERDCommenter mappings
if has("gui_macvim") && has("gui_running")
  map <D-/> <Plug>NERDCommenterToggle<CR>
  imap <D-/> <Esc><Plug>NERDCommenterToggle<CR>
else
  map <leader>c<Space> <Plug>NERDCommenterToggle<CR>
endif

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Underline the current line with '='
nmap <silent> <leader>ul :t.<CR>Vr=

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e

  " Bubble multiple lines
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <A-]> >gv
  vmap <A-[> <gv

  nmap <A-]> >>
  nmap <A-[> <<

  omap <A-]> >>
  omap <A-[> <<

  imap <A-]> <Esc>>>i
  imap <A-[> <Esc><<i

  " Bubble single lines
  nmap <C-Up> [e
  nmap <C-Down> ]e
  nmap <C-k> [e
  nmap <C-j> ]e

  " Bubble multiple lines
  vmap <C-Up> [egv
  vmap <C-Down> ]egv
  vmap <C-k> [egv
  vmap <C-j> ]egv

  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>

  " Map Control-# to switch tabs
  map  <C-0> 0gt
  imap <C-0> <Esc>0gt
  map  <C-1> 1gt
  imap <C-1> <Esc>1gt
  map  <C-2> 2gt
  imap <C-2> <Esc>2gt
  map  <C-3> 3gt
  imap <C-3> <Esc>3gt
  map  <C-4> 4gt
  imap <C-4> <Esc>4gt
  map  <C-5> 5gt
  imap <C-5> <Esc>5gt
  map  <C-6> 6gt
  imap <C-6> <Esc>6gt
  map  <C-7> 7gt
  imap <C-7> <Esc>7gt
  map  <C-8> 8gt
  imap <C-8> <Esc>8gt
  map  <C-9> 9gt
  imap <C-9> <Esc>9gt
endif

" function to set for CakePHP {{{
function! CakePHP()
  let g:syntastic_php_phpcs_args = '--report=csv --standard=CakePHP'
  set noexpandtab
endfunction
command! CakePHP :call CakePHP()
function! CakePHPRemove()
  let g:syntastic_php_phpcs_args = '--report=csv'
  set expandtab                   " Tabs are spaces, not tabs
endfunction
command! CakePHPRemove :call CakePHPRemove()
" }}}
call CakePHP()

