" ===== Bundles settings =====
" NERDTree
unmap <C-e>
unmap <leader>nt
map <leader>n :NERDTreeToggle<CR>:NERDTreeMirror<CR>

" Powerline
let g:Powerline_symbols = 'fancy'

" NERDCommenter
let g:NERDSpaceDelims=1

" SnipMate
" Setting the author var
let g:snips_author='Atunori Kamori <atunori.kamori@gmail.com>'

" Tabularize
if exists(":Tabularize")
    nmap <Leader>aa :Tabularize /=><CR>
    vmap <Leader>aa :Tabularize /=><CR>
endif

" NERDCommenter mappings
if has("gui_macvim") && has("gui_running")
  map <D-/> <Plug>NERDCommenterToggle<CR>
  imap <D-/> <Esc><Plug>NERDCommenterToggle<CR>
else
  map <leader>c<Space> <Plug>NERDCommenterToggle<CR>
endif

" Vdebug
let g:vdebug_keymap = {
\   'run':'<F1>',
\   'run_to_cursor':'<F11>',
\   'step_over':'<F9>',
\   'step_into':'<F8>',
\   'step_out':'<F7>',
\   'close':'<F10>',
\   'detach':'<F2>',
\   'set_breakpoint':'<F6>',
\   'get_context':'<F3>',
\   'eval_under_cursor':'<F12>',
\}
" ======= General =========
set ts=4 sw=4 et
set listchars=tab:▸.,trail:.,extends:>,precedes:<
set background=dark
let g:hybrid_use_Xresources = 1
colorscheme hybrid
" set clipboard&
set nofoldenable
set nospell
set guifont=Source\ Code\ Pro\ for\ Powerline:h16,DejaVu\ Sans\ Mono\ for\ Powerline:h16,Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
nmap <silent> <leader>tt :set ts=2 sw=2 et<CR>
nmap <silent> <leader>tf :set ts=4 sw=4 et<CR>
nmap <leader>b :BuffergatorOpen<CR>
nmap <Leader>rt :TagbarOpenAutoClose<CR>

unmap <Esc>[F
unmap <Esc>[H

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Underline the current line with '='
nmap <silent> <leader>ul :t.<CR>Vr=

" ヴィジュアルモードで選択したテキストをnで検索する(レジスタv使用)
vnoremap <silent> n "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>

" 括弧補完
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap " ""<LEFT>
" ===== for spf13-vim =======
let g:DisableAutoPHPFolding = 1

" ===== for PHP ======
" replace
" For function argument with comment header
nnoremap <leader>ra viwy?^[\ta-z ]*\<function\><CR>/{<CR>%v%V[/:s/\V<C-r>"//gc<left><left><left>
" For variable in function
nnoremap <leader>rf viwy?^[\ta-z ]*\<function\><CR>/{<CR>%v%V:s/\V<C-r>"//gc<left><left><left>
" For local replace
nnoremap <leader>rl gd[{V%:s/<C-R>///gc<left><left><left>
" For global replace
nnoremap <leader>rg gD:%s/<C-R>///gc<left><left><left>

" :makeでPHP構文チェック
au FileType php setlocal makeprg=php\ -l\ %
au FileType php setlocal errorformat=%m\ in\ %f\ on\ line\ %l

" PHPの関数やクラスの折りたたみ(非常に重い）
let php_folding = 0

" 文字列の中のSQLをハイライト
let php_sql_query = 1

" Baselibメソッドのハイライト
let php_baselib = 1

" HTMLもハイライト
let php_htmlInStrings = 1

" <? を無効にする→ハイライト除外にする
let php_noShortTags = 1

" ] や ) の対応エラーをハイライト
let php_parent_error_close = 1
let php_parent_error_open = 1

"SQLのPHP文字リテラルへの整形(:Sqltop, :Sqlfromp)
function! SQLToPHP()
  %s/^\(.\+\)$/"\1 " \./g
  normal G$
  execute "normal ?.<CR>"
  normal xxggVG
  echo "Convert to PHP String is finished."
endfunction
command! Sqltop :call SQLToPHP()

function! SQLFromPHP()
  %s/^"\(.\+\) " *\.*$/\1/g
  normal ggVG
  echo "Convert from PHP String is finished."
endfunction
command! Sqlfromp :call SQLFromPHP()

" Function to locate endpoints of a PHP block {{{
function! PhpBlockSelect(mode)
    let motion = "v"
    let line = getline(".")
    let pos = col(".")-1
    let end = col("$")-1

    if a:mode == 1
        if line[pos] == '?' && pos+1 < end && line[pos+1] == '>'
            let motion .= "l"
        elseif line[pos] == '>' && pos > 1 && line[pos-1] == '?'
            " do nothing
        else
            let motion .= "/?>/e\<CR>"
        endif
        let motion .= "o"
        if end > 0
            let motion .= "l"
        endif
        let motion .= "?<\\?php\\>\<CR>"
    else
        if line[pos] == '?' && pos+1 < end && line[pos+1] == '>'
            " do nothing
        elseif line[pos] == '>' && pos > 1 && line[pos-1] == '?'
            let motion .= "h?\\S\<CR>""
        else
            let motion .= "/?>/;?\\S\<CR>"
        endif
        let motion .= "o?<\\?php\\>\<CR>4l/\\S\<CR>"
    endif

    return motion
endfunction
" }}}
" Mappings to select full/inner PHP block
nmap <silent> <expr> vaP PhpBlockSelect(1)
nmap <silent> <expr> viP PhpBlockSelect(0)
" Mappings for operator mode to work on full/inner PHP block
omap <silent> aP :silent normal vaP<CR>
omap <silent> iP :silent normal viP<CR>

